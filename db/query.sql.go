// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNewUser = `-- name: CreateNewUser :one
WITH new_user AS (
    INSERT INTO users(username, email)
    VALUES($1, $2)
    RETURNING id, email, username, bio, image
),
new_user_password AS (
    INSERT INTO user_passwords(user_id, password)
    SELECT id,
        $3
    from new_user
)
SELECT id, email, username, bio, image
FROM new_user
`

type CreateNewUserParams struct {
	Username string
	Email    string
	Password string
}

type CreateNewUserRow struct {
	ID       int32
	Email    string
	Username string
	Bio      pgtype.Text
	Image    pgtype.Text
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRow(ctx, createNewUser, arg.Username, arg.Email, arg.Password)
	var i CreateNewUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, username, bio, image
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    username = $3,
    bio = $4,
    image = $5
WHERE id = $1
RETURNING id, email, username, bio, image
`

type UpdateUserParams struct {
	ID       int32
	Email    string
	Username string
	Bio      pgtype.Text
	Image    pgtype.Text
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Username,
		arg.Bio,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Bio,
		&i.Image,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE user_passwords
SET password = $2
WHERE user_id = $1
`

type UpdateUserPasswordParams struct {
	UserID   pgtype.Int4
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.UserID, arg.Password)
	return err
}
